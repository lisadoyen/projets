<?php

namespace ContainerDDUIVed;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityManagerService extends App_KernelProdContainer
{
    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = new \Doctrine\ORM\Configuration();

        $b = new \Symfony\Component\Cache\DoctrineProvider(($container->privates['doctrine.system_cache_pool'] ?? $container->load('getDoctrine_SystemCachePoolService')));
        $c = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();
        $c->addDriver(new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(($container->privates['annotations.cached_reader'] ?? $container->getAnnotations_CachedReaderService()), [0 => (\dirname(__DIR__, 4).'/src/Entity')]), 'App\\Entity');

        $a->setEntityNamespaces(['App' => 'App\\Entity']);
        $a->setMetadataCacheImpl($b);
        $a->setQueryCacheImpl($b);
        $a->setResultCacheImpl(new \Symfony\Component\Cache\DoctrineProvider(($container->privates['doctrine.result_cache_pool'] ?? $container->load('getDoctrine_ResultCachePoolService'))));
        $a->setMetadataDriverImpl($c);
        $a->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $a->setProxyNamespace('Proxies');
        $a->setAutoGenerateProxyClasses(false);
        $a->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true));
        $a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Repository\\ActionRepository' => ['privates', 'App\\Repository\\ActionRepository', 'getActionRepositoryService', true],
            'App\\Repository\\AnnonceRepository' => ['privates', 'App\\Repository\\AnnonceRepository', 'getAnnonceRepositoryService', true],
            'App\\Repository\\ArticleRepository' => ['privates', 'App\\Repository\\ArticleRepository', 'getArticleRepositoryService', true],
            'App\\Repository\\AvisRepository' => ['privates', 'App\\Repository\\AvisRepository', 'getAvisRepositoryService', true],
            'App\\Repository\\BibliothequeRepository' => ['privates', 'App\\Repository\\BibliothequeRepository', 'getBibliothequeRepositoryService', true],
            'App\\Repository\\CategorieRepository' => ['privates', 'App\\Repository\\CategorieRepository', 'getCategorieRepositoryService', true],
            'App\\Repository\\EnregistrementRepository' => ['privates', 'App\\Repository\\EnregistrementRepository', 'getEnregistrementRepositoryService', true],
            'App\\Repository\\EntiteRepository' => ['privates', 'App\\Repository\\EntiteRepository', 'getEntiteRepositoryService', true],
            'App\\Repository\\EntrepriseRepository' => ['privates', 'App\\Repository\\EntrepriseRepository', 'getEntrepriseRepositoryService', true],
            'App\\Repository\\FavorisRepository' => ['privates', 'App\\Repository\\FavorisRepository', 'getFavorisRepositoryService', true],
            'App\\Repository\\FonctionRepository' => ['privates', 'App\\Repository\\FonctionRepository', 'getFonctionRepositoryService', true],
            'App\\Repository\\GenreRepository' => ['privates', 'App\\Repository\\GenreRepository', 'getGenreRepositoryService', true],
            'App\\Repository\\LienRepository' => ['privates', 'App\\Repository\\LienRepository', 'getLienRepositoryService', true],
            'App\\Repository\\PanierRepository' => ['privates', 'App\\Repository\\PanierRepository', 'getPanierRepositoryService', true],
            'App\\Repository\\RubriqueRepository' => ['privates', 'App\\Repository\\RubriqueRepository', 'getRubriqueRepositoryService', true],
            'App\\Repository\\StatutEnregistrementRepository' => ['privates', 'App\\Repository\\StatutEnregistrementRepository', 'getStatutEnregistrementRepositoryService', true],
            'App\\Repository\\StatutRepository' => ['privates', 'App\\Repository\\StatutRepository', 'getStatutRepositoryService', true],
            'App\\Repository\\TagRepository' => ['privates', 'App\\Repository\\TagRepository', 'getTagRepositoryService', true],
            'App\\Repository\\TrancheAgeRepository' => ['privates', 'App\\Repository\\TrancheAgeRepository', 'getTrancheAgeRepositoryService', true],
            'App\\Repository\\TypeActionRepository' => ['privates', 'App\\Repository\\TypeActionRepository', 'getTypeActionRepositoryService', true],
            'App\\Repository\\TypeEnregistrementRepository' => ['privates', 'App\\Repository\\TypeEnregistrementRepository', 'getTypeEnregistrementRepositoryService', true],
            'App\\Repository\\TypeEntiteRepository' => ['privates', 'App\\Repository\\TypeEntiteRepository', 'getTypeEntiteRepositoryService', true],
            'App\\Repository\\TypeLienRepository' => ['privates', 'App\\Repository\\TypeLienRepository', 'getTypeLienRepositoryService', true],
            'App\\Repository\\UserRepository' => ['privates', 'App\\Repository\\UserRepository', 'getUserRepositoryService', true],
            'App\\Repository\\VideoldRepository' => ['privates', 'App\\Repository\\VideoldRepository', 'getVideoldRepositoryService', true],
        ], [
            'App\\Repository\\ActionRepository' => '?',
            'App\\Repository\\AnnonceRepository' => '?',
            'App\\Repository\\ArticleRepository' => '?',
            'App\\Repository\\AvisRepository' => '?',
            'App\\Repository\\BibliothequeRepository' => '?',
            'App\\Repository\\CategorieRepository' => '?',
            'App\\Repository\\EnregistrementRepository' => '?',
            'App\\Repository\\EntiteRepository' => '?',
            'App\\Repository\\EntrepriseRepository' => '?',
            'App\\Repository\\FavorisRepository' => '?',
            'App\\Repository\\FonctionRepository' => '?',
            'App\\Repository\\GenreRepository' => '?',
            'App\\Repository\\LienRepository' => '?',
            'App\\Repository\\PanierRepository' => '?',
            'App\\Repository\\RubriqueRepository' => '?',
            'App\\Repository\\StatutEnregistrementRepository' => '?',
            'App\\Repository\\StatutRepository' => '?',
            'App\\Repository\\TagRepository' => '?',
            'App\\Repository\\TrancheAgeRepository' => '?',
            'App\\Repository\\TypeActionRepository' => '?',
            'App\\Repository\\TypeEnregistrementRepository' => '?',
            'App\\Repository\\TypeEntiteRepository' => '?',
            'App\\Repository\\TypeLienRepository' => '?',
            'App\\Repository\\UserRepository' => '?',
            'App\\Repository\\VideoldRepository' => '?',
        ])));

        $container->services['doctrine.orm.default_entity_manager'] = $instance = \Doctrine\ORM\EntityManager::create(($container->services['doctrine.dbal.default_connection'] ?? $container->load('getDoctrine_Dbal_DefaultConnectionService')), $a);

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }
}
